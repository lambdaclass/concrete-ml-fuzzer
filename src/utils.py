import atheris

def _classification_training() -> data, restult, data_info:
    """
    Create a classification training set
    """
    return

def _regression_training():
    """
    Create a regression training set
    """
    return

def initialize_models(Model: ModelClass, *params) -> (model, model, data_info):
    """
    Initialize concrete and sklearn models. Automatically load iris or diabetes dataset
    """
    return

def consume_bytes(input_bytes: bytes, data_info, n_samples=1000, margin=1) -> data:
    """
    Consume bytes and return a testing dataset for the models
    input_bytes: bytes generated by atheris
    data_info: dictionary provided by initialize_models; contains information to build the random datasets
    n_samples: the size of the dataset
    margin: margin to expand the dataset range beyond the range of the training set. Recomended to use small values
    """
    fdp = atheris.FuzzedDataProvider(input_bytes)
    data = [
            fdp.ConsumeFloatListInRange(
                data_info["dimensions"], 
                data_info["min_feature"] - margin, 
                data_info["max_feature"] + margin
            ) for _ in range(n_samples)
           ]
    return data

def mean_absolute_percentage_error(y_fhe, y_sklearn) -> float:
    """
    Calculate the mean absolute percentage error to determine how much the fhe model deviates from the sklearn model.
    Values fall in the (0, 100) range, lower values represent less deviation.
    """
    return 
